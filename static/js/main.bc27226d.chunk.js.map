{"version":3,"sources":["serviceWorker.js","App.js","reportWebVitals.js","index.js","App.module.scss"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","App","useState","km","setKm","litresPer100km","setLitresPer100km","celsius","setCelsius","handleMilesToKilometers","useCallback","event","result","target","value","isFinite","toFixed","handleMilesGalonToKmPerLitres","handleFarenheitsToCelsius","className","css","inputWrapper","onChange","inputMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.bc27226d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\nexport function register(config) {\r\n    if ('serviceWorker' in navigator) {\r\n        console.log(\"Hi there\")\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            console.log(\"Hi there\", window.location.origin)\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            console.log(\"Hi there\", window.location.origin)\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                console.log(\"Checked \");\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.',\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import css from './App.module.scss';\r\nimport {useCallback, useState} from \"react\";\r\n\r\nfunction App() {\r\n    const [ km, setKm ] = useState(0);\r\n    const [ litresPer100km, setLitresPer100km ] = useState(0);\r\n    const [ celsius, setCelsius ] = useState(0);\r\n    const milesInOneKilometers = 1.609;\r\n\r\n    const handleMilesToKilometers = useCallback((event) => {\r\n      const result = event.target.value * milesInOneKilometers;\r\n      return isFinite(result) ? setKm(result.toFixed(3)) : setKm(0)\r\n    });\r\n\r\n    const handleMilesGalonToKmPerLitres = useCallback((event) => {\r\n        const firstPart = 100* 3.785;\r\n        const secondPart = event.target.value * milesInOneKilometers;\r\n        const result =  firstPart/secondPart;\r\n        return isFinite(result) ? setLitresPer100km(result.toFixed(3)) : setLitresPer100km(0);\r\n    }, [litresPer100km]);\r\n\r\n    const handleFarenheitsToCelsius = useCallback((event) => {\r\n        const firstPart = event.target.value - 32;\r\n        const secondPart = 5/9;\r\n        const result = firstPart * secondPart;\r\n        return isFinite(result) ? setCelsius(result.toFixed(3)) : setCelsius(0);\r\n    }, [celsius]);\r\n\r\n  return (\r\n   <div className={css.inputWrapper}>\r\n       <p>Мили в км</p>\r\n     <input\r\n         onChange={handleMilesToKilometers}\r\n         inputMode='numeric'\r\n     />\r\n       <span>{km}</span>\r\n       <p>Галоны в литры на 100 км</p>\r\n     <input\r\n         onChange={handleMilesGalonToKmPerLitres}\r\n         inputMode='numeric'\r\n     />\r\n       <span>{litresPer100km}</span>\r\n       <p>Фаренгейты в цельсии</p>\r\n     <input\r\n        onChange={handleFarenheitsToCelsius}\r\n        inputMode='numeric'\r\n     />\r\n       <span>{celsius}</span>\r\n\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrapper\":\"App_inputWrapper__3RP0Y\"};"],"sourceRoot":""}